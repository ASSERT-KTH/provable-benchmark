#![allow(unused_imports)]
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::*;
use risc0_zkvm::{get_prover_server, get_version, ExecutorEnv, ExecutorImpl, ProverOpts, Session, VerifierContext};
use serde::Serialize;
use serde_with::{serde_as, DurationMilliSeconds};
use clap::{Parser, command};

use std::{
    //path::Path,
    env::{self, args, Args}, 
    time::{Duration, Instant}
};

use human_repr::HumanDuration; // Crate for human representations of durations and bytesizes

use csv::Writer;

#[derive(Parser, Clone)]
struct RuntimeArgs {
    #[arg(long)]
    guest_input: usize,
    #[arg(long)]
    prover_options: String,
    //#[arg(long)]
    //bench_program: String    
}

#[serde_as]
#[derive(Serialize)]
struct Records {
    #[serde_as(as = "DurationMilliSeconds")]
    exec_duration: Duration,
    #[serde_as(as = "DurationMilliSeconds")]
    composite_prove_duration: Duration,
    #[serde_as(as = "DurationMilliSeconds")]
    succinct_prove_duration: Duration,
    #[serde_as(as = "DurationMilliSeconds")]
    fast_prove_duration: Duration,
    #[serde_as(as = "DurationMilliSeconds")]
    composite_verify_duration: Duration,
    #[serde_as(as = "DurationMilliSeconds")]
    succinct_verify_duration: Duration,
    #[serde_as(as = "DurationMilliSeconds")]
    fast_verify_duration: Duration,
    proof_size: usize,
    cycle_count: u64,
    segment_count: usize
}

impl Records{
    fn new()-> Self{
        Records {
            exec_duration: Duration::default(),
            composite_prove_duration: Duration::default(),
            succinct_prove_duration: Duration::default(),
            fast_prove_duration: Duration::default(),
            composite_verify_duration: Duration::default(),
            succinct_verify_duration: Duration::default(),
            fast_verify_duration: Duration::default(),
            proof_size:0,
            cycle_count:0,
            segment_count:0
        }
    }
}




fn main() {
    //let args = RuntimeArgs::parse();
    //let args: Vec<String> = env::args().collect();
    //let cmd_input = &args[1];
    //let prover_options = &args[2];

    let mut record = Records::new();
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();


    let input = 1000;
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        //.segment_limit_po2(19)
        .build()
        .unwrap();

    let mut exec = ExecutorImpl::from_elf(env, GCD_ELF).unwrap();
    let start = Instant::now();
    let session = exec.run().unwrap();
    let elapsed = start.elapsed();
    println!("Executing with input size: {}", input.to_string());
    println!("Execution time: {}", elapsed.human_duration().to_string());
    record.exec_duration = elapsed;
    let u_cycles = session.user_cycles;
    let tot_cycles = session.total_cycles;
    let tot_segments = session.stats().segments;
    println!("Total Segments: {}", tot_segments);
    println!("Total Cycles: {}", tot_cycles);
    println!("User Cycles: {}", u_cycles);
    record.cycle_count = tot_cycles;
    record.segment_count = tot_segments;


/*     // Obtain the prover. Change ProverOpts implementation for different provers.
    let prover = match args.prover_options.as_str() {
        "composite" => {
            println!("Using composite prover");
            get_prover_server(&ProverOpts::composite()).unwrap()
        },
        "fast" => {
            println!("Using fast prover (SHA-256 hash function)");
            get_prover_server(&ProverOpts::fast()).unwrap()
        },
        "succinct" => {
            println!("Using succinct prover");
            get_prover_server(&ProverOpts::succinct()).unwrap()
        },
        "segsize" => {
            println!("Using prover with custom segment size");
            get_prover_server(&ProverOpts::from_max_po2(19)).unwrap()
        },
        _ => {
            println!("Using default prover");
            get_prover_server(&ProverOpts::default()).unwrap()
        }
    }; */

    //Obtain context for the verifier. Change this for different verification implementations. 
    let ctx = VerifierContext::default();

    // Composite prover
    println!("Using composite prover");

    let prover = get_prover_server(&ProverOpts::composite()).unwrap();

    let prove_start = Instant::now();
    let receipt = prover
        .prove_session(&ctx, &session)
        .unwrap()
        .receipt;
    let proof_duration = prove_start.elapsed();
    println!("Proving time: {}", proof_duration.human_duration().to_string());
    record.composite_prove_duration = proof_duration;


    let verify_start = Instant::now();
    receipt
        .verify(GCD_ID)
        .unwrap();
    let verify_duration = verify_start.elapsed();
    println!("Verification time: {}", verify_duration.human_duration().to_string());
    record.composite_verify_duration = verify_duration;

    // Succinct prover
    println!("Using succinct prover");

    let prover = get_prover_server(&ProverOpts::succinct()).unwrap();

    let prove_start = Instant::now();
    let receipt = prover
        .prove_session(&ctx, &session)
        .unwrap()
        .receipt;
    let proof_duration = prove_start.elapsed();
    println!("Proving time: {}", proof_duration.human_duration().to_string());
    record.succinct_prove_duration = proof_duration;


    let verify_start = Instant::now();
    receipt
        .verify(GCD_ID)
        .unwrap();
    let verify_duration = verify_start.elapsed();
    println!("Verification time: {}", verify_duration.human_duration().to_string());
    record.succinct_verify_duration = verify_duration;

    // Fast prover
    println!("Using fast prover");

    let prover = get_prover_server(&ProverOpts::composite()).unwrap();

    let prove_start = Instant::now();
    let receipt = prover
        .prove_session(&ctx, &session)
        .unwrap()
        .receipt;
    let proof_duration = prove_start.elapsed();
    println!("Proving time: {}", proof_duration.human_duration().to_string());
    record.fast_prove_duration = proof_duration;


    let verify_start = Instant::now();
    receipt
        .verify(GCD_ID)
        .unwrap();
    let verify_duration = verify_start.elapsed();
    println!("Verification time: {}", verify_duration.human_duration().to_string());
    record.fast_verify_duration = verify_duration;

    record.proof_size = receipt.seal_size();
    println!("Proof size (size of the seal for the receipt: {}", record.proof_size);

    let mut wtr = csv::Writer::from_path("bench.csv").unwrap();
    wtr.serialize(&record).expect("Could not serialize");
    wtr.flush().expect("Could not flush");

    

}
