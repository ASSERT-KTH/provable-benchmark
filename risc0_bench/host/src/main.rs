// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_BENCH_ELF, GUEST_BENCH_ID
};
use risc0_zkvm::{default_prover, get_prover_server, ExecutorEnv, ExecutorImpl, Session, VerifierContext, ProverOpts};

use std::{
    //path::Path,
    time::{Duration, Instant}, //For timekeeping
};

use human_repr::{HumanCount, HumanDuration, HumanThroughput}; // Crate for human representations of durations and bytesizes

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let input: u32 = 15 * u32::pow(2, 27) + 1;
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    let mut exec = ExecutorImpl::from_elf(env, GUEST_BENCH_ELF).unwrap();
    let start = Instant::now();
    let session = exec.run().unwrap();
    let elapsed = start.elapsed();
    print!("{}", elapsed.human_duration().to_string());


    // Obtain the default prover.
    let prover = get_prover_server(&ProverOpts::default()).unwrap();
    let ctx = VerifierContext::default();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_start = Instant::now();
    let receipt = prover
        .prove_session(&ctx, &session)
        .unwrap()
        .receipt;
    let proof_duration = prove_start.elapsed();
    print!("{}", proof_duration.human_duration().to_string());

    // extract the receipt.
    //let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    //let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    let verify_start = Instant::now();
    receipt
        .verify(GUEST_BENCH_ID)
        .unwrap();
    let verify_duration = verify_start.elapsed();
    print!("{}", verify_duration.human_duration().to_string());
}
